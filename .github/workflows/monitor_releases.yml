name: Monitor Runner Releases

on:
  push:
    branches:
      - main

jobs:
  monitor-releases:
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get Latest Release
        id: get-latest-release
        run: |
          latest_release=$(curl -s https://api.github.com/repos/actions/runner/releases/latest | jq -r '.tag_name')
          echo "latest_release=$latest_release" >> $GITHUB_ENV

      - name: Debug Latest Release
        run: |
          echo "Latest release: $latest_release"

      - name: Get Latest Release from Previous Major Version
        id: get-latest-release-previous-major
        run: |
          previous_major_version=$(echo $latest_release | awk -F'.' '{print $1"."$2-1}')
          echo "Previous major version: $previous_major_version"

          # Get all releases from the repository
          all_releases=$(curl -s "https://api.github.com/repos/actions/runner/releases")
          # echo "All releases: $all_releases"

          # Filter releases by the previous major version
          releases_previous_major=$(echo "$all_releases" | jq -r "map(select(.tag_name | startswith(\"$previous_major_version\")))")
          # echo "Releases from previous major version: $releases_previous_major"

          # Get the latest release from the previous major version
          latest_release_previous_major=$(echo "$releases_previous_major" | jq -r '.[0].tag_name')
          echo "latest_release_previous_major=$latest_release_previous_major"
          echo "latest_release_previous_major=$latest_release_previous_major" >> $GITHUB_ENV

      - name: Compare Versions and Take Action
        id: take_actions
        run: |
          installed_version=$CURRENT_VERSION
          latest_version_previous_major=$latest_release_previous_major
          
          if [ "$latest_version_previous_major" != "" ]; then
            echo "Latest release from previous major version: $latest_version_previous_major"
            
            if [ "$latest_version_previous_major" != "$installed_version" ]; then  #need to change this using this for testing as secret is setup to 308
            notify=true
            echo "notify=$notify" >> $GITHUB_ENV
            echo "notify=$notify"
            echo "New release available: $latest_version_previous_major"
            else
              notify=false
              echo "notify=$notify" >> $GITHUB_ENV
              echo "notify=$notify"
              echo "No new releases available"
            fi
          else
            echo "No releases available for the previous major version"
          fi

      - name: Set up Bash
        run: |
          chmod +x update_image_tag.sh
          ./update_image_tag.sh ${{ github.event.inputs.newTag }}

      - name: Create PR and Notify via Github-actions
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const response = await octokit.actions.createWorkflowDispatch({
              owner: 'ajinkyak423',  // Replace with your repository owner
              repo: 'actions-poc',  // Replace with your repository name
              workflow_id: 'create-pr.yml',  // Replace with the actual workflow file name
              ref: 'main',  // Replace with the branch where the second workflow is defined
              inputs: {
                REPOSITORY: "${{ github.repository }}", // Replace with the target repository
                REF: 'main',  // Replace with the desired branch/tag/sha
                TITLE: "GitHub action runner update",
                BODY: "New release available: ",
                SLACK_CHANNEL: "actions-notif"  // Replace with the desired Slack channel
              }
            });
            console.log(response);



          
