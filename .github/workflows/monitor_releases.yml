name: Monitor Runner Releases

on:
  push:
    branches:
      - main
  schedule:
    - cron: "0 0 */15 * *"

jobs:
  monitor-releases:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get Latest Release
        id: get-latest-release
        run: |
          latest_release=$(curl -s https://api.github.com/repos/actions/runner/releases/latest | jq -r '.tag_name')
          echo "::set-output name=latest_release::$latest_release"

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Get Latest Release
        id: get-latest-release
        run: |
          latest_release=$(curl -s https://api.github.com/repos/actions/runner/releases/latest | jq -r '.tag_name')
          echo "latest_release=$latest_release" >> $GITHUB_ENV

      - name: Get Latest Release from Previous Major Version
        id: get-latest-release-previous-major
        run: |
          latest_release=$latest_release
          previous_major_version=$(echo $latest_release | awk -F'.' '{print $1"."$2-1}')
          echo "Previous major version: $previous_major_version"

          # Get the latest release from the previous major version
          latest_release_previous_major=$(curl -s "https://api.github.com/repos/actions/runner/releases?per_page=1" | jq -r ".[] | select(.tag_name | startswith(\"$previous_major_version\")) | .tag_name")
          echo "latest_release_previous_major=$latest_release_previous_major" >> $GITHUB_ENV

      - name: Compare Versions and Take Action
        run: |
          installed_version=$CURRENT_VERSION
          latest_version_previous_major=${{ steps.get-latest-release-previous-major.outputs.latest_release_previous_major }}
          
          if [[ "$latest_version_previous_major" != "" ]]; then
            echo "Latest release from previous major version: $latest_version_previous_major"
            
            if [[ "$latest_version_previous_major" != "$installed_version" ]]; then
              echo "New release available: $latest_version_previous_major"

              # Notify Slack about the new release
              slack_message="New release available: $latest_version_previous_major"
              curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"$slack_message\"}" "https://hooks.slack.com/services/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"
            else
              echo "No new releases available"
            fi
          else
            echo "No releases available for the previous major version"
          fi

