name: Monitor Runner Releases

on:
  push:
    branches:
      - main

jobs:
  monitor-releases:
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get Release Information
        id: release-info
        run: |
          chmod +x ./get_release.sh
          ./get_release.sh
          # CURRENT_VERSION=${CURRENT_VERSION}
          # latest_release=${latest_release}
          # previous_major_version=${previous_major_version}
          # latest_release_previous_major=${latest_release_previous_major}

          release_data="Current Version: ${CURRENT_VERSION}, Latest Release: ${latest_release}, Previous Major Version: ${previous_major_version}, Latest Release from Previous Major: ${latest_release_previous_major}"


      - name: Update File
        run: |
          notify=${{steps.release-info.outputs.notify}}
          
          if $notify; then
            python update_image_tag.py  # Replace with the actual name of your Python script
          else
            echo "Notify value: $notify"
          fi

      - name: Commit Changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout -b Runner-Update  # Create a new branch for the changes
          git add .
          git commit -m "Update file via GitHub Actions"

      - name: Pull Latest Changes from Main
        run: |
          git fetch origin main:main
          git checkout main
          git pull origin main

      - name: Push Changes to New Branch
        run: |
          git checkout Runner-Update
          git rebase main
          git push origin Runner-Update --force  # Force push to the new branch

      - name: Create Pull Request
        run: |
          TOKEN="${{ secrets.MY_GITHUB_ACTION_TOKEN }}"
          REPO="${{ github.repository }}"
          BASE=main
          HEAD=Runner-Update
          TITLE="Automated PR: Update file"
          BODY="This PR updates the file via GitHub Actions."

          # Create the pull request and extract the PR URL directly using jq
          pr_url=$(curl -X POST \
            -H "Authorization: token $TOKEN" \
            -H "Content-Type: application/json" \
            -d "{
              \"title\": \"$TITLE\",
              \"body\": \"$BODY\",
              \"base\": \"$BASE\",
              \"head\": \"$HEAD\"
            }" \
            "https://api.github.com/repos/$REPO/pulls" | jq -r '.html_url')

          # Set the PR URL as an environment variable
          echo "pr_url=$pr_url" >> $GITHUB_ENV
                      
      - name: Create PR and Notify via Github-actions
        run: |
          postData='{
            "ref": "main",
            "inputs": {
              "REPOSITORY": "${{ github.repository }}",
              "REF": "Runner-Update",
              "PR": "'"$pr_url"'",
              "TITLE": "GitHub action runner update",
              "BODY": "'"$release_data"'",
              "SLACK_CHANNEL": "actions-notif"
            }
          }'
          # Note that postData BODY can be sensitive and may cause workflow to
          # fail if the content of the changelog includes char sequences that
          # github actions may interpret as needing substition
          # (e.g. if dollar-open-brackets-close-brackets sequence is seen)
          curl -X POST \
          -d "${postData}" \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.MY_GITHUB_ACTION_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/ajinkyak423/actions-poc/actions/workflows/create-pr.yml/dispatches