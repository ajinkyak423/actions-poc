name: Monitor Runner Releases

on:
  push:
    branches:
      - main

jobs:
  monitor-releases:
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get Latest Release
        id: get-latest-release
        run: |
          latest_release=$(curl -s https://api.github.com/repos/actions/runner/releases/latest | jq -r '.tag_name')
          echo "latest_release=$latest_release" >> $GITHUB_ENV
      - name: Debug Latest Release
        run: |
          echo "Latest release: $latest_release"
      - name: Get Latest Release from Previous Major Version
        id: get-latest-release-previous-major
        run: |
          previous_major_version=$(echo $latest_release | awk -F'.' '{print $1"."$2-1}')
          echo "Previous major version: $previous_major_version"
          # Get all releases from the repository
          all_releases=$(curl -s "https://api.github.com/repos/actions/runner/releases")
          # echo "All releases: $all_releases"
          # Filter releases by the previous major version
          releases_previous_major=$(echo "$all_releases" | jq -r "map(select(.tag_name | startswith(\"$previous_major_version\")))")
          # echo "Releases from previous major version: $releases_previous_major"
          # Get the latest release from the previous major version
          latest_release_previous_major=$(echo "$releases_previous_major" | jq -r '.[0].tag_name')
          echo "latest_release_previous_major=$latest_release_previous_major"
          echo "latest_release_previous_major=$latest_release_previous_major" >> $GITHUB_ENV
      - name: Compare Versions and Take Action
        id: take_actions
        run: |
          installed_version=$CURRENT_VERSION
          latest_version_previous_major=$latest_release_previous_major
          
          if [ "$latest_version_previous_major" != "" ]; then
            echo "Latest release from previous major version: $latest_version_previous_major"
            
            if [ "$latest_version_previous_major" != "$installed_version" ]; then  #need to change this using this for testing as secret is setup to 308
            notify=true
            echo "notify=$notify" >> $GITHUB_ENV
            echo "notify=$notify"
            echo "New release available: $latest_version_previous_major"
            else
              notify=false
              echo "notify=$notify" >> $GITHUB_ENV
              echo "notify=$notify"
              echo "No new releases available"
            fi
          else
            echo "No releases available for the previous major version"
          fi
      - name: Set up Bash
        run: |
          chmod +x update_image_tag.sh
          ./update_image_tag.sh ${{ github.event.inputs.newTag }}


      - name: Commit Changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout -b feature/update-file  # Create a new branch for the changes
          git add .
          git commit -m "Update file via GitHub Actions"

      - name: Pull Latest Changes from Main
        run: |
          git fetch origin main:main
          git pull origin main

      - name: Create PR and Notify via Github-actions
        # if: steps.take_actions.outputs.notif
        run: |
          postData='{
            "ref": "main",
            "inputs": {
              "REPOSITORY": "${{ github.repository }}",
              "REF": "Runner--upgrade",
              "TITLE": "GitHub action runner update",
              "BODY": "New release available: ",
              "SLACK_CHANNEL": "actions-notif"
            }
          }'
          # Note that postData BODY can be sensitive and may cause workflow to
          # fail if the content of the changelog includes char sequences that
          # github actions may interpret as needing substition
          # (e.g. if dollar-open-brackets-close-brackets sequence is seen)
          curl -X POST \
          -d "${postData}" \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.MY_GITHUB_ACTION_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/ajinkyak423/actions-poc/actions/workflows/create-pr.yml/dispatches