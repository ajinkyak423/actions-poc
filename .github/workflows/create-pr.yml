name: Create PR on behalf of Workflows
on:
  workflow_dispatch:
    inputs:
      REPOSITORY:
        description: 'The Ridecell repository where PR should be created, in the format Ridecell/{repo_name}'
        required: true
      REF:
        description: 'The desired branch/tag/sha to merge into main/master'
        required: true
      TITLE:
        description: 'Title for the Pull Request'
        required: true
      BODY:
        description: 'Text body for the Pull Request'
        required: false
        default: ''
      PR:
        description: 'Text body for the Pull Request'
        required: false
      SLACK_CHANNEL:
        description: 'Slack channel to be notified of PR creation'
        required: false
        default: 'devops-eng-private'

jobs:
  create-pr:
    runs-on: ubuntu-latest
    name: Create Pull Request

    steps:
      - name: Display Workflow Inputs
        run: |
          echo '${{ toJSON(github.event.inputs) }}'

      - name: Format inputs for postdata body
        id: post-body
        run: |
          # It seems although input BODY was received in JSON format (e.g. newlines escaped),
          # the escaped values gets converted. Hence, we need to format it to JSON again for
          # building our postData body in the next step.
          
          echo PR_BODY=${{ toJSON(inputs.BODY) }} >> $GITHUB_OUTPUT

      - name: Debug Info
        run: |
          echo "github.event_name: ${{ github.event_name }}"
          echo "github.event.inputs.DESIRED_VERSION: ${{ inputs.PR}}"

      - name: Create Pull Request
        if: inputs.PR
        id: cpr
        run: |
          TOKEN="${{ secrets.MY_GITHUB_ACTION_TOKEN }}"
          REPO="${{ github.repository }}"
          BASE=main
          postData='{
            "title":"${{ inputs.TITLE }}",
            "body":"${{ steps.post-body.outputs.PR_BODY }}",
            "head":"${{ inputs.REF }}",
            "base":"main"
          }'
          # Create the pull request and extract the PR URL directly using jq
          pr_url=$(curl -X POST \
            -H "Authorization: token $TOKEN" \
            -H "Accept: application/json" \
            -d "${postData}" \
            "https://api.github.com/repos/$REPO/pulls" | jq -r '.html_url'\
             -w '{"status_code": "%{http_code}"}' | jq -s )

          # Set the PR URL as an environment variable
          echo "pr_url=$pr_url"
          echo "pr_url=$pr_url" >> $GITHUB_OUTPUT

          status_code=$(echo $pr_url | jq -r '.[1].status_code')
          if [ $status_code == '422' ]
          then
            # get reason for PR not being created.
            # (Two jq commands since errors is an array holding json)
            reason=$(echo $pr_url | jq -r '.[0].errors' | jq -r '.[0].message')
            echo "$reason"
            if [[ $reason =~ 'pull request already exists' ]]
            then
              echo "Workflow will not recreate or replace the pull request"
            else
              exit 1
            fi
          elif [ $status_code == '201' ]
          then
            # save pull request url for notification step
            PR_URL=$(echo $pr_url | jq -r ".[0].html_url")
            echo "pullreq_url=$PR_URL" >> $GITHUB_OUTPUT
          else
            echo "Unexpected status code $status_code in create PR API call. Exiting."
            exit 1
          fi

      - name: Notify Devops of PR
        # if: steps.cpr.outputs.pr_url
        id: slack-notify
        uses: sonots/slack-notice-action@v3
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        with:
          username: GithubActions
          status: custom
          payload: |
            {
              "channel": "#${{ inputs.SLACK_CHANNEL }}",
              "text": "New version available",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "New version available"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "plain_text",
                    "text": "${{steps.post-body.outputs.PR_BODY}}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "PR: <${{steps.cpr.outputs.pr_url}}>"
                  }
                }
              ]
            }
