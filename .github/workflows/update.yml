name: only Monitor Runner Releases

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      DESIRED_VERSION:
        description: 'GitHub-Runner version to install'
        required: false

jobs:
  monitor-releases:
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Debug DESIRED_VERSION
        id: desired-version
        if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'
        run: |
          echo "DESIRED_VERSION: ${{ github.event.inputs.DESIRED_VERSION }}"
          echo "DESIRED_VERSION=${{github.event.inputs.DESIRED_VERSION}}" >>$GITHUB_ENV

      - name: Get Release Information
        id: release-info
        run: |
          chmod +x ./get_release.sh
          ./get_release.sh

      - name: PR BODY
        id: pr-body
        run: |
          pr_body = toJSON("Current Version: ${{ env.CURRENT_VERSION }}\nLatest Release: ${{ env.latest_release }}\nPrevious Major Version: ${{ env.previous_major_version }}\nLatest Release from Previous Major: ${{ env.latest_release_previous_major }}")
          echo pr_body=$pr_body >> $GITHUB_OUTPUT

      - name: Notify about new release
        if: github.event.inputs.DESIRED_VERSION == null
        id: slack-notify-monitor
        uses: sonots/slack-notice-action@v3
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        with:
          username: GithubActions
          status: custom
          payload: |
            {
              "channel": "#actions-notif",
              "text": "New version available",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "New version available"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "plain_text",
                    "text": "${{steps.format.outputs.pr_body}}"
                  }
                }
              ]
            }

      - name: Update File
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.DESIRED_VERSION
        run: |
          python update_image_tag.py

      - name: Commit Changes
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.DESIRED_VERSION
        id: commit
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout -b Runner-Update  # Create a new branch for the changes
          git add .
          git commit -m "Update file via GitHub Actions"

      - name: Pull Latest Changes from Main
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.DESIRED_VERSION
        run: |
          git fetch origin main:main
          git checkout main
          git pull origin main

      - name: Push Changes to New Branch
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.DESIRED_VERSION
        run: |
          git checkout Runner-Update
          git rebase main
          git push origin Runner-Update --force  # Force push to the new branch

      - name: Create PR and Notify via Github-actions
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.DESIRED_VERSION && steps.commit.outcome == 'success'
        run: |
          postData='{
            "ref": "main",
            "inputs": {
              "REPOSITORY": "${{ github.repository }}",
              "REF": "Runner-Update",
              "TITLE": "GitHub action runner update",
              "BODY": "Current Version: ${{ env.CURRENT_VERSION }}\nLatest Release: ${{ env.latest_release }}\nPrevious Major Version: ${{ env.previous_major_version }}\nLatest Release from Previous Major: ${{ env.latest_release_previous_major }}",
              "PR": "${{ env.DESIRED_VERSION }}",
              "SLACK_CHANNEL": "actions-notif"
            }
          }'
          curl -X POST \
          -d "${postData}" \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.MY_GITHUB_ACTION_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/ajinkyak423/actions-poc/actions/workflows/create-pr.yml/dispatches
